#!/bin/bash

# clag v 1.0.0
# ©2025 barcek
# License: MIT
# @ github.com
# /barcek/clag

# Assumes the presence of Bash in '/bin', plus AWK (Gawk), command,
# cut, grep, head, pr, sed, tail, tr, wc and xargs

# Accepts terms for a hyphenated string pseudorandomly extended w/
# a pair of modifiers ($ones, $twos) preceding a single noun ($objs),
# outputting once or per a number passed (using short flag '-n') w/
# one string per line or the full set as pretty-printed JSON (-j);
# or shows version (-v), help text (-h) or self-test results (-T)

set -ue

cmds_assumed_present_plus=$(echo $(head -n 10 $0 | tail -n 2)\
  | grep -oP "(?<=plus).*$" | tr -d "#,()" | sed 's/ and / /' | tr "AWKG" "awkg")

# set substring elements

ones=(aeolian alternate auroral blustery brilliant brisk buffed buoyant charged clotted conic crepuscular crisp cryptic diaphanous diffuse distant distilled drizzled effervescent ethereal extensible extruded fallen fathomless feathered fecund fledgling fleeting fluid fluted frothy galvanized gaseous gelatinous gossamer granular greased halcyon haunted helical hermetic hoist imaginal infused invert laden larval lead lidded lidless liminal lucid luminal luminous lustrous memetic meteoric mimetic nebulous obscure offset oneiric outer parabolic plastic plumbed polished precipitous prismatic provisional pyroclastic quilted raised shimmering shrouded siren slick soaring some spectral speckled spherical spongy spruce sprung spun stacked stellar sterile summoned suspended tethered tidal torpid turbid umbral unearthly winged wispy)

twos=(algo bit blip bloat bloom blur buzz chum churn cinder cipher crab curdle daze destiny dive doom dream drift drip dump dyno echo exo ferment fire fizz flash flex flicker flow flume flurry flutter fume gigo glide glister gloam glory gloss gravy grind gust gyro half haze hooch hope jam leet lightning mega meso mirage moonshot murk noo overflow pearl petri pivot plume porta promise pseudo quasi ray reflux refraction rheum riddle rush seed sky slip slurp spark spill splice splurge spore spume stream storm strand strato sweat swoop tangle thunder tilt tropo vacuum vapour venture whisper win wish zephyr)

objs=(abyss bank barrel basin basket beaker berg bin blister bottle bowl box bubble bushel caddy can cap carafe cart carton case cask cauldron cavern cavity cell chamber cistern closet collector conch corner crate crucible demijohn den deposit depot dish dispenser dome drum flagon flask globe grove harbour hollow hopper horn intake jar jug keg lair lattice lobe locker lode loft moat nest niche pail pan pannier pen pitcher platter plenum pocket pod pool pot pouch realm recess retort roost sac scoop scuttle silo sink siphon spittoon sump tank thimble tin tray trough tub tube tureen vat vesicle vial void well)

# set other default values

number=1
format="text"

key_sg="string"
key_pl="strings"

msg_fail_cmds="Absent command"
msg_fail_opts="No option for flag"
msg_fail_opts_n_head="Argument to flag"
msg_fail_opts_n_tail="not positive integer"

# define utility functions, general

notify() {
  echo "$@" >&2
}

handle_exit() {
  [ -n "$2" ] && notify "${@: 2}"
  exit $1
}

# ensure presence of commands

cmds_absent=()

ensure_present() {

  # accrue commands absent
  for cmd in "${@: 2}"; do
    if [[ -z "$(command -v $cmd)" ]]; then
      cmds_absent+=($cmd)
    fi
  done

  cmds_absent_n=${#cmds_absent[@]}

  if (( $cmds_absent_n > 0 )); then
    # produce one error for all commands
    case $cmds_absent_n in
      1) $1 1 "${msg_fail_cmds} $cmds_absent";;
      2) $1 1 "${msg_fail_cmds}s ${cmds_absent[0]} and ${cmds_absent[1]}";;
      *) $1 1 "${msg_fail_cmds}s $(echo ${cmds_absent[@]: 0:${#cmds_absent[@]}-1} | sed 's/ /, /g') and ${cmds_absent[${#cmds_absent[@]}-1]}";;
    esac
  fi
}

ensure_present handle_exit $cmds_assumed_present_plus

# define option handlers

present_core_info() {
  # extract and print name and version number
  line=$(head -n 3 "$1" | tail -n 1)
  echo "${line: 2:12}"
}

present_help_text() {

  # generate and print help text (title, usage, current, summary, context)

  # define utility functions, help
  get_fill() {
    echo "" | pr -To $1 | sed 's/ /-/g'
  }
  get_indented() {
    indt=$(($1 - $2))
    echo "$3" | pr -To $indt
  }
  # extract notes and get core info and substring element counts and
  # generate and print output
  notes=$(head -n 16 $1 | tail -n 8 | sed 's/$/\\n/')
  width=$(echo -e "$notes" | head -n 1 | wc -c)

  core_info="$(present_core_info $1)"
  diff=$((${width} - ${#core_info} - 2))
  indt=$(($diff / 2 - 1))
  rmdr=$(($diff % 2))
  fill_l=$(get_fill $indt)
  fill_r=$(get_fill $(($indt + $rmdr)))

  n_ones=$(printf "%'d" ${#ones[@]})
  n_twos=$(printf "%'d" ${#twos[@]})
  n_objs=$(printf "%'d" ${#objs[@]})

  l_ones=${#n_ones}
  l_twos=${#n_twos}
  l_objs=${#n_objs}
  l_max=$(echo -e "$l_ones\n$l_twos\n$l_objs" | sort -n | tail -n 1)

  n_ones_i="$(get_indented $l_max $l_ones $n_ones)"
  n_twos_i="$(get_indented $l_max $l_twos $n_twos)"
  n_objs_i="$(get_indented $l_max $l_objs $n_objs)"

  line=$(get_fill $l_max)
  prod=$(printf "%'d" $(($n_ones * $n_twos * $n_objs)))
  prod_i="$(get_indented $(($l_max + 6)) ${#prod} $prod)"

  echo $fill_l "$core_info" $fill_r
  echo "Usage: clag [ --number/-n <1+> | --json/-j ] [ TERM [ ... ] ] /"
  echo "              --version/-v / --help/-h / --test/-T"
  echo "Current:"
  echo " ones  $n_ones_i ×"
  echo " twos  $n_twos_i ×"
  echo " objs. $n_objs_i"
  echo "       $line"
  echo " $prod_i"
  echo "Summary:"
  echo -e $notes | sed 's/^ //g' | head -n 8 | tail -n 5 | sed 's/#//' | sed 's/\$\(\w\{4\}\)/\1/g' | sed 's/objs/objs./' | sed 's/term/TERM/'
  echo "Context:"
  echo -e $notes | sed 's/^ //g' | head -n 2 | sed 's/#//'
}

perform_self_test() {

  count_case=0
  count_pass=0

  # define utility functions, self-test
  denote_spaces() {
    while IFS= read line; do echo "$line" | sed 's/ /./g'; done
  }
  show_newlines() {
    while read line; do echo "$line" | sed 's/$/\\n/g' | tr -d "\n"; done
  }
  run_test_case() {
    ((count_case++)) || true
    if [ "$2" = "$3" ]; then
      notify "✓ PASS: $1" && ((count_pass++)) || true
    else
      notify "✕ FAIL: $1 | expected '$2' to equal '$3'"
    fi
  }
  # get command outputs
  output_t____="$($0 one 2 "three 4" five-6- @seven-8_9.10,11//:12             | show_newlines)"
  output_t_n_c="$($0 -n 2 one 2 "three 4" five-6- @seven-8_9.10,11//:12        | show_newlines)"
  output_t_n_w="$($0 --number 2 one 2 "three 4" five-6- @seven-8_9.10,11//:12  | show_newlines)"
  output_t_n_1="$($0 -n 1 one 2 "three 4" five-6- @seven-8_9.10,11//:12        | show_newlines)"
  output_t_n_f="$($0 -n 1.5 one 2 "three 4" five-6- @seven-8_9.10,11//:12 2>&1 | show_newlines)"
  output_t_n_0="$($0 -n 0 one 2 "three 4" five-6- @seven-8_9.10,11//:12   2>&1 | show_newlines)"
  output_t_n_m="$($0 -n -1 one 2 "three 4" five-6- @seven-8_9.10,11//:12  2>&1 | show_newlines)"

  output_j_c__="$($0 -j one 2 "three 4" five-6- @seven-8_9.10,11//:12          | denote_spaces | show_newlines)"
  output_j_w__="$($0 --json one 2 "three 4" five-6- @seven-8_9.10,11//:12      | denote_spaces | show_newlines)"
  output_j_c_n="$($0 -j -n 2 one 2 "three 4" five-6- @seven-8_9.10,11//:12     | denote_spaces | show_newlines)"
  output_j_w_n="$($0 --json -n 2 one 2 "three 4" five-6- @seven-8_9.10,11//:12 | denote_spaces | show_newlines)"
  output_j_n_1="$($0 -j -n 1 one 2 "three 4" five-6- @seven-8_9.10,11//:12     | denote_spaces | show_newlines)"

  # set expectations
  exp_pre="one-2-three-4-five-6-seven-8-9-10-11-12"
  exp_fmt_j_1_split="{\n..string:.\n}\n"
  exp_fmt_j_2_split="{\n..strings:.[\n....,\n....\n..]\n}\n"

  notify "-------------------"
  run_test_case "text/1/dlmt" "$(echo $output_t____ | cut -d "-" -f1-12)" "$exp_pre"
  run_test_case "text/1/fd_c" "$(echo $output_t____ | awk -F "-" '{ print NF }')" "15"
  run_test_case "text/1/ln_c" "$(echo $output_t____ | wc -l)" "1"
  notify "---------------------"
  run_test_case "text/n/c/dlmt" "$(echo -ne $output_t_n_c | head -n 1 | cut -d"-" -f1-12)" "$exp_pre"
  run_test_case "text/n/c/fd_c" "$(echo -ne $output_t_n_c | head -n 1 | awk -F "-" '{ print NF }')" "15"
  run_test_case "text/n/c/ln_c" "$(echo -ne $output_t_n_c | wc -l)" "2"
  notify "- - - - - - - - - - -"
  run_test_case "text/n/w/dlmt" "$(echo -ne $output_t_n_w | head -n 1 | cut -d"-" -f1-12)" "$exp_pre"
  run_test_case "text/n/w/fd_c" "$(echo -ne $output_t_n_w | head -n 1 | awk -F "-" '{ print NF }')" "15"
  run_test_case "text/n/w/ln_c" "$(echo -ne $output_t_n_w | wc -l)" "2"
  notify "- - - - - - - - - - -"
  run_test_case "text/n/1/dlmt" "$(echo $output_t_n_1 | cut -d "-" -f1-12)" "$exp_pre"
  run_test_case "text/n/1/fd_c" "$(echo $output_t_n_1 | awk -F "-" '{ print NF }')" "15"
  run_test_case "text/n/1/ln_c" "$(echo $output_t_n_1 | wc -l)" "1"
  notify "---------------------"
  run_test_case "json/1/c/frmt" "$(echo     $output_j_c__ | awk -F "\"" '{ print $1 $2 $3 $5 }')" "$exp_fmt_j_1_split"
  run_test_case "json/1/c/dlmt" "$(echo     $output_j_c__ | cut -d "\"" -f4 | cut -d "-" -f1-12)" "$exp_pre"
  run_test_case "json/1/c/fd_c" "$(echo     $output_j_c__ | cut -d "\"" -f4 | awk -F "-" '{ print NF }')" "15"
  run_test_case "json/1/c/ln_c" "$(echo -ne $output_j_c__ | wc -l)" "3"
  notify "- - - - - - - - - - -"
  run_test_case "json/1/w/frmt" "$(echo     $output_j_w__ | awk -F "\"" '{ print $1 $2 $3 $5 }')" "$exp_fmt_j_1_split"
  run_test_case "json/1/w/dlmt" "$(echo     $output_j_w__ | cut -d "\"" -f4 | cut -d "-" -f1-12)" "$exp_pre"
  run_test_case "json/1/w/fd_c" "$(echo     $output_j_w__ | cut -d "\"" -f4 | awk -F "-" '{ print NF }')" "15"
  run_test_case "json/1/w/ln_c" "$(echo -ne $output_j_w__ | wc -l)" "3"
  notify "---------------------"
  run_test_case "json/n/c/frmt" "$(echo     $output_j_c_n | awk -F "\"" '{ print $1 $2 $3 $5 $7 }')" "$exp_fmt_j_2_split"
  run_test_case "json/n/c/dlmt" "$(echo     $output_j_c_n | awk -F "\"" '{ print $4 "-" $6 }' | cut -d "-" -f1-12,16-27)" "$exp_pre-$exp_pre"
  run_test_case "json/n/c/fd_c" "$(echo     $output_j_c_n | awk -F "\"" '{ print $4 "-" $6 }' | awk -F "-" '{ print NF }')" "30"
  run_test_case "json/n/c/ln_c" "$(echo -ne $output_j_c_n | wc -l)" "6"
  notify "- - - - - - - - - - -"
  run_test_case "json/n/w/frmt" "$(echo     $output_j_w_n | awk -F "\"" '{ print $1 $2 $3 $5 $7 }')" "$exp_fmt_j_2_split"
  run_test_case "json/n/w/dlmt" "$(echo     $output_j_w_n | awk -F "\"" '{ print $4 "-" $6 }' | cut -d "-" -f1-12,16-27)" "$exp_pre-$exp_pre"
  run_test_case "json/n/w/fd_c" "$(echo     $output_j_w_n | awk -F "\"" '{ print $4 "-" $6 }' | awk -F "-" '{ print NF }')" "30"
  run_test_case "json/n/w/ln_c" "$(echo -ne $output_j_w_n | wc -l)" "6"
  notify "- - - - - - - - - - -"
  run_test_case "json/n/1/frmt" "$(echo     $output_j_n_1 | awk -F "\"" '{ print $1 $2 $3 $5 }')" "$exp_fmt_j_1_split"
  run_test_case "json/n/1/dlmt" "$(echo     $output_j_n_1 | cut -d "\"" -f4 | cut -d "-" -f1-12)" "$exp_pre"
  run_test_case "json/n/1/fd_c" "$(echo     $output_j_n_1 | cut -d "\"" -f4 | awk -F "-" '{ print NF }')" "15"
  run_test_case "json/n/1/ln_c" "$(echo -ne $output_j_n_1 | wc -l)" "3"
  notify "---------------------"
  run_test_case "str/fail/n/f" "$(echo $output_t_n_f)" "$msg_fail_opts_n_head '-n' $msg_fail_opts_n_tail\n"
  run_test_case "str/fail/n/0" "$(echo $output_t_n_0)" "$msg_fail_opts_n_head '-n' $msg_fail_opts_n_tail\n"
  run_test_case "str/fail/n/m" "$(echo $output_t_n_m)" "$msg_fail_opts_n_head '-n' $msg_fail_opts_n_tail\n"
  notify "--------------------"
  run_test_case "str/fail/c/1" "$($0 -a             2>&1 | show_newlines)" "$msg_fail_opts '-a'\n"
  run_test_case "str/fail/w/1" "$($0 --a__          2>&1 | show_newlines)" "$msg_fail_opts '--a__'\n"
  run_test_case "str/fail/m/2" "$($0 --a__ -b       2>&1 | show_newlines)" "$msg_fail_opts '--a__' or '-b'\n"
  run_test_case "str/fail/m/3" "$($0 --a__ -b --c__ 2>&1 | show_newlines)" "$msg_fail_opts '--a__', '-b' or '--c__'\n"
  notify "--------------------"
  run_test_case "str/cmds/0" "$(ensure_present echo command           | show_newlines)" ""
  run_test_case "str/cmds/1" "$(ensure_present echo cmd_1             | show_newlines)" "1 ${msg_fail_cmds} cmd_1\n"
  run_test_case "str/cmds/2" "$(ensure_present echo cmd_1 cmd_2       | show_newlines)" "1 ${msg_fail_cmds}s cmd_1 and cmd_2\n"
  run_test_case "str/cmds/3" "$(ensure_present echo cmd_1 cmd_2 cmd_3 | show_newlines)" "1 ${msg_fail_cmds}s cmd_1, cmd_2 and cmd_3\n"
  notify "--------------------"
  run_test_case "str/v/c/full" "$($0 -v        | grep -E "clag v\s?([0-9]+\.){2}[0-9]+" | wc -l)" "1"
  run_test_case "str/v/w/full" "$($0 --version | grep -E "clag v\s?([0-9]+\.){2}[0-9]+" | wc -l)" "1"
  notify "--------------------"
  run_test_case "str/h/c/form" "$($0 -h     | grep -E "(- clag v|Usage:|Current:|Summary:|Context:)" | wc -l)" "5"
  run_test_case "str/h/c/ln_c" "$($0 -h     | wc -l)" "18"
  run_test_case "str/h/w/form" "$($0 --help | grep -E "(- clag v|Usage:|Current:|Summary:|Context:)" | wc -l)" "5"
  run_test_case "str/h/w/ln_c" "$($0 --help | wc -l)" "18"
  notify "--------------------"

  result="$count_pass/$count_case"
  [ $count_pass -eq $count_case ] && handle_exit 0 "✓ $result" || handle_exit 1 "✕ $result"
}

# handle any arguments provided

arg_i=1
fails=()

while (( $arg_i <= ${#} )); do

  case "${@: $arg_i:1}" in

    "--help"|"-h")
      # show help text then exit
      present_help_text $0
      exit 0
      ;;

    "--version"|"-v")
      # show name and version number then exit
      present_core_info $0
      exit 0
      ;;

    "--test"|"-T")
      # perform self-test then exit
      perform_self_test
      exit 0
      ;;

    "--number"|"-n")
      # set $number to the value of the next argument
      number="${@: $arg_i+1:1}"
      if [[ $number =~ ^[0-9]+\.[0-9]*$ ]] || [ $number -lt 1 ]; then
        handle_exit 1 "$msg_fail_opts_n_head '${@: $arg_i:1}' $msg_fail_opts_n_tail"
      fi
      ((arg_i++))
      ;;

    "--json"|"-j")
      # set $format to the value of the next argument
      format="json"
      ;;

    --*|-*)
      # extend $fails with unavailable flag
      fails+=("'${@: $arg_i:1}'")
      ;;

    *)
      break
      ;;
  esac

  ((arg_i++))
done

fails_n=${#fails[@]}

if (( $fails_n > 0 )); then
  # produce one error for all flags
  case $fails_n in
    1) handle_exit 1 "$msg_fail_opts $fails";;
    2) handle_exit 1 "$msg_fail_opts ${fails[0]} or ${fails[1]}";;
    *) handle_exit 1 "$msg_fail_opts $(echo ${fails[@]: 0:${#fails[@]}-1} | sed 's/ /, /g') or ${fails[${#fails[@]}-1]}";;
  esac
fi

# define primary functions

extract() {
  array=("$@")
  count=${#array[@]}
  index=$(($RANDOM%$count))
  echo ${array[$index]}
}

combine() {
  one=$(extract "${ones[@]}")
  two=$(extract "${twos[@]}")
  obj=$(extract "${objs[@]}")
  echo "$1$one-$two-$obj" | tr -s "-"
}

json_arr_wrap() {
  echo -e "[\n  \"$(echo "$@" | sed 's/ /\",\n  \"/g')\"\n]"
}

json_key() {
  echo "{"
  echo -e "$2" | head -n  1 | xargs -0 printf "  \"$1\": %s"
  echo -e "$2" | tail -n +2 | head -n -1 | pr -To 2
  if [ "$(echo -ne "$2" | wc -l)" -gt 1 ]; then
    echo -e "$2" | tail -n  1 | pr -To 2
  fi
  echo "}"
}

# compose prefix for strings
prefix=""
for arg in ${@:$arg_i}; do
  part="$(echo $arg | tr -c "[[:digit:]][[:alpha:]][[:space:]]" "-" | tr "A-Z" "a-z")"
  prefix+="$part-"
done

# generate strings w/ prefix
strings=()
for ((i=0; i<$number; i++)); do
  strings+=($(combine "$prefix"))
done

# format and output strings
if [ "$format" = "json" ]; then
  if [ $number -ne 1 ]; then
    json_set="$(json_arr_wrap ${strings[@]})"
    json_key "$key_pl" "$json_set"
  else
    json_key "$key_sg" "\"$strings\""
  fi
else
  echo ${strings[@]} | tr " " "\n"
fi
